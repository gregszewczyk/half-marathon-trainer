// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // Training data
  trainingPlans   TrainingPlan[]
  trainingSessions TrainingSession[]
  garminData      GarminData[]
  aiPredictions   AIPrediction[]

  // User preferences
  preferences UserPreferences?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Training preferences
  goalTime        String  @default("2:00:00")
  units           String  @default("metric") // metric or imperial
  raceDate        DateTime?
  experienceLevel String  @default("intermediate") // beginner, intermediate, advanced
  
  // Injury history
  hasInjuryHistory Boolean @default(false)
  injuryNotes      String?
  
  // Schedule preferences
  preferredRunDays    String[] // ["monday", "wednesday", "saturday"]
  preferredRunTimes   String[] // ["morning", "evening"]
  gymDaysPerWeek      Int      @default(6)
  
  // Notifications
  emailNotifications  Boolean @default(true)
  reminderTime        String? // "18:00"
  
  // Garmin integration
  garminConnected     Boolean @default(false)
  garminSyncEnabled   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model TrainingPlan {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  goalTime    String   @default("2:00:00")
  raceDate    DateTime
  startDate   DateTime
  endDate     DateTime
  totalWeeks  Int      @default(12)
  
  // Plan metadata
  phase       String   // base, build, peak, taper
  weekNumber  Int
  isActive    Boolean  @default(true)
  isCompleted Boolean  @default(false)
  
  // Generated plan data
  planData    Json     // Store the complete plan structure
  
  sessions    TrainingSession[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("training_plans")
}

model TrainingSession {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlanId String?
  trainingPlan   TrainingPlan? @relation(fields: [trainingPlanId], references: [id], onDelete: SetNull)
  
  // Session details
  date           DateTime
  day            String   // "Monday", "Tuesday", etc.
  type           String   // "RUNNING", "GYM", "REST"
  subType        String?  // "Easy", "Tempo", "Intervals", "Long", "Push", "Pull", "Legs"
  
  // Running session data
  distance       Float?   // in km
  targetPace     String?  // "5:30" format
  duration       Int?     // in minutes
  description    String?
  
  // Gym session data
  exercises      Json?    // Array of exercises
  
  // Session status
  isCompleted    Boolean  @default(false)
  isSkipped      Boolean  @default(false)
  completedAt    DateTime?
  
  // Feedback data
  actualPace     String?
  actualDistance Float?
  actualDuration Int?
  rpe            Int?     // Rate of Perceived Exertion (1-10)
  difficulty     Int?     // Difficulty rating (1-10)
  feeling        String?  // "terrible", "bad", "ok", "good", "great"
  comments       String?
  
  // Heart rate data
  avgHeartRate   Int?
  maxHeartRate   Int?
  
  // GPS/Performance data
  paceData       Json?    // Pace splits
  elevationGain  Float?
  calories       Int?
  
  // AI recommendations
  aiAdaptations  AIPrediction[]
  
  // Garmin sync
  garminActivityId String?
  garminSynced     Boolean @default(false)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("training_sessions")
}

model GarminData {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Garmin activity data
  activityId String   @unique
  activityType String // "running", "cycling", etc.
  startTime  DateTime
  duration   Int      // in seconds
  distance   Float?   // in meters
  
  // Performance metrics
  avgPace    String?
  avgHeartRate Int?
  maxHeartRate Int?
  calories   Int?
  elevationGain Float?
  
  // Detailed data
  splits     Json?    // Lap/split data
  gpsData    Json?    // GPS coordinates
  heartRateData Json? // HR zones and timeline
  
  // Session matching
  sessionId  String?  // Link to TrainingSession
  isMatched  Boolean  @default(false)
  
  // Raw Garmin data
  rawData    Json
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("garmin_data")
}

model AIPrediction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   TrainingSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  
  // Prediction type
  type      String   // "adaptation", "race_prediction", "recovery"
  
  // AI response data
  recommendations Json // Array of recommendation strings
  adaptations     Json // Intensity/volume changes
  reasoning       String
  severity        String // "low", "medium", "high"
  confidence      Float? // 0.0 to 1.0
  
  // Prediction metadata
  triggerCondition String? // What triggered the AI analysis
  modelUsed        String? // "sonar-pro", etc.
  apiCost          Float?  // Cost of the API call
  
  // User interaction
  wasAccepted      Boolean? // Did user accept the recommendation
  userFeedback     String?  // User's feedback on the prediction
  
  // Race time predictions
  predictedTime    String?  // For race predictions
  currentFitness   Json?    // Fitness assessment data
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("ai_predictions")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String   // "info", "warn", "error"
  message   String
  data      Json?
  userId    String?
  sessionId String?
  
  createdAt DateTime @default(now())

  @@map("system_logs")
}

// Indexes for performance
model DatabaseMigration {
  id        String   @id @default(cuid())
  name      String   @unique
  executedAt DateTime @default(now())

  @@map("database_migrations")
}