// üîß FIXED: src/prisma/schema.prisma
// This fixes the relationship errors and maintains your existing data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ‚úÖ FIXED: User model with proper relationships
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üîß FIXED: Proper relationship references
  profile         UserProfile?     @relation("UserProfile")
  trainingPlans   TrainingPlan[]   @relation("UserTrainingPlans")
  sessionFeedback SessionFeedback[] @relation("UserSessionFeedback")
  
  @@map("users")
}

// ‚úÖ User Profile for goal setting and onboarding
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  
  // Goal setting (for guided onboarding)
  raceType     RaceType @default(HALF_MARATHON)
  targetTime   String   @default("2:00:00")  // Target race time
  raceDate     DateTime? // Target race date
  fitnessLevel FitnessLevel @default(INTERMEDIATE)
  
  // Training preferences
  trainingDaysPerWeek Int @default(4)
  preferredDifficulty Int @default(5) // 1-10 scale
  
  // Personal info (optional)
  age     Int?
  weight  Float? // in kg
  gender  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // üîß FIXED: Proper relationship with relation name
  user User @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// üîß FIXED: TrainingPlan with proper user relationship
model TrainingPlan {
  id          String   @id @default(cuid())
  userId      String   // Link to user
  goalTime    String   @default("2:00:00")
  raceDate    DateTime @default("2025-10-12T00:00:00Z")
  createdAt   DateTime @default(now())
  
  // üîß FIXED: Proper relationships with relation names
  user     User              @relation("UserTrainingPlans", fields: [userId], references: [id], onDelete: Cascade)
  feedback SessionFeedback[] @relation("TrainingPlanFeedback")

   @@map("training_plans")    // ‚Üê ADD THIS LINE  
}

// üîß CORRECTED: Update your SessionFeedback model to match real database

model SessionFeedback {
  id              String   @id @default(cuid())
  userId          String   // ‚úÖ Matches DB
  sessionId       String   // ‚úÖ Matches DB  
  week            Int      // üîß CHANGED: weekNumber ‚Üí week (matches DB column)
  day             String   // ‚úÖ Matches DB
  sessionType     String   // ‚úÖ Matches DB
  sessionSubType  String   // ‚úÖ Matches DB
  plannedDistance Float?   // ‚úÖ Matches DB
  plannedPace     String?  // ‚úÖ Matches DB
  plannedTime     String?  // ‚úÖ Matches DB
  completed       String   // ‚úÖ Matches DB
  actualPace      String?  // ‚úÖ Matches DB
  difficulty      Int      // ‚úÖ Matches DB
  rpe            Int       // ‚úÖ Matches DB
  feeling        String    // ‚úÖ Matches DB
  comments       String?   // ‚úÖ Matches DB
  // aiModified - I don't see this in your DB, remove if not exists
  submittedAt    DateTime  // üîß CHANGED: createdAt ‚Üí submittedAt (matches DB)
  
  // Relationships - these need the actual foreign key column names
  user           User         @relation("UserSessionFeedback", fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation("TrainingPlanFeedback", fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId String       // ‚úÖ Matches DB
  
  @@map("session_feedback")
}

// ‚úÖ Enums for goal setting
enum RaceType {
  FIVE_K
  TEN_K
  HALF_MARATHON
  FULL_MARATHON
  CUSTOM
}

enum FitnessLevel {
  BEGINNER      // New to running
  INTERMEDIATE  // Regular runner, some race experience  
  ADVANCED      // Experienced racer, consistent training
  ELITE         // Competitive runner
}