// ðŸš€ ENHANCED: src/prisma/schema.prisma
// Added GeneratedSession table for AI-powered custom plan generation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// âœ… User model (unchanged - preserves existing data)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Proper relationship references
  profile         UserProfile?      @relation("UserProfile")
  trainingPlans   TrainingPlan[]    @relation("UserTrainingPlans")
  sessionFeedback SessionFeedback[] @relation("UserSessionFeedback")
  
  // ðŸš€ NEW: Generated sessions for custom plans
  generatedSessions GeneratedSession[] @relation("UserGeneratedSessions")
  
  @@map("users")
}

// ðŸš€ ENHANCED: UserProfile with custom plan generation fields (unchanged from your current)
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  
  // âœ… EXISTING: Goal setting (preserved)
  raceType     RaceType @default(HALF_MARATHON)
  targetTime   String   @default("2:00:00")  // Target race time or "FINISH"
  raceDate     DateTime? // Target race date
  fitnessLevel FitnessLevel @default(INTERMEDIATE)
  
  // âœ… EXISTING: Training preferences (preserved)
  trainingDaysPerWeek Int @default(4)
  preferredDifficulty Int @default(5) // 1-10 scale
  
  // âœ… EXISTING: Personal info (preserved)
  age     Int?
  weight  Float? // in kg
  gender  String?
  
  // ðŸš€ NEW: Personal Bests (for AI plan intelligence)
  pb5k            String? // "MM:SS" format, e.g., "23:45"
  pb10k           String? // "MM:SS" format, e.g., "48:30"
  pbHalfMarathon  String? // "H:MM:SS" format, e.g., "1:45:20"
  pbMarathon      String? // "H:MM:SS" format, e.g., "3:30:15"
  pbCustom        String? // For custom race distances
  pbCustomDistance String? // "5.2K", "15K", etc.
  
  // ðŸš€ NEW: Other Training Activities
  otherWorkouts   String[] @default([]) // ["gym", "cycling", "swimming", "yoga"]
  gymDaysPerWeek  Int?     // How many gym sessions per week
  gymType         String?  // "strength", "crossfit", "functional"
  
  // ðŸš€ NEW: Running Club Integration
  runningClub     String?  // Club name, e.g., "MadeRunning"
  clubSchedule    String[] @default([]) // ["Monday 5PM", "Wednesday 5AM", "Saturday 9AM"]
  keepClubRuns    Boolean  @default(true) // Preserve club schedule in plan
  
  // ðŸš€ NEW: Training Preferences
  timePreferences String[] @default([]) // ["early_morning", "evening", "flexible"]
  workoutTypes    String[] @default([]) // ["outdoor", "treadmill", "track", "trail"]
  location        String?  // City/region for weather/terrain considerations
  
  // ðŸš€ NEW: Advanced Preferences
  injuryHistory   String[] @default([]) // ["hamstring", "knee", "ankle"]
  restDayPrefs    String[] @default([]) // ["sunday", "wednesday"]
  maxWeeklyMiles  Float?   // Maximum weekly mileage preference
  
  // ðŸš€ NEW: Plan Generation Metadata
  planGenerated   Boolean  @default(false) // Has custom plan been generated
  lastPlanUpdate  DateTime? // When plan was last regenerated
  onboardingComplete Boolean @default(false) // Full onboarding completed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Proper relationship with relation name
  user User @relation("UserProfile", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// ðŸš€ NEW: Generated Session table for AI-powered custom plans
model GeneratedSession {
  id        String   @id @default(cuid())
  userId    String   // User who owns this session
  week      Int      // Training week (1-12)
  dayOfWeek String   // "Monday", "Tuesday", etc.
  
  // Session Identification
  sessionType    SessionType  // RUNNING, GYM, REST, CROSS_TRAINING
  sessionSubType String?      // "easy", "tempo", "intervals", "long", "push", "pull", "legs"
  
  // Running Session Data (for sessionType = RUNNING)
  distance       Float?       // Distance in kilometers
  pace           String?      // Target pace in "MM:SS" format
  duration       String?      // Duration like "60 min"
  
  // Session Schedule & Context
  scheduledTime  String?      // "17:00", "05:00", etc.
  isRunningClub  Boolean      @default(false) // Is this a club session
  isMoveable     Boolean      @default(true)  // Can be rescheduled via drag-drop
  
  // Session Details (stored as JSON for flexibility)
  warmup         String?      // Warmup description
  mainSet        String?      // Main workout description  
  cooldown       String?      // Cooldown description
  targetRPE      Json?        // { min: 4, max: 6, description: "Easy pace" }
  
  // AI Modification Tracking
  aiModified     Boolean      @default(false) // Has AI modified this session
  originalData   Json?        // Original session data before AI modifications
  aiReason       String?      // Why AI modified this session
  
  // Plan Generation Context
  planVersion    String       @default("1.0")  // Track plan iterations
  generatedAt    DateTime     @default(now())   // When this session was generated
  lastModified   DateTime     @updatedAt        // When last modified by AI
  
  // Relationships
  user User @relation("UserGeneratedSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  // Ensure unique sessions per user/week/day combination
  @@unique([userId, week, dayOfWeek, sessionType])
  @@map("generated_sessions")
}

// âœ… TrainingPlan (includes ALL existing columns - preserves your data)
model TrainingPlan {
  id            String   @id @default(cuid())
  userId        String   // Link to user
  goalTime      String   @default("2:00:00")
  raceDate      DateTime @default("2025-10-12T00:00:00Z")
  createdAt     DateTime @default(now())
  
  // âœ… EXISTING FIELDS: Added back to match your actual database
  currentWeek   Int      @default(1)
  predictedTime String   @default("2:00:00")
  startDate     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Proper relationships with relation names
  user     User              @relation("UserTrainingPlans", fields: [userId], references: [id], onDelete: Cascade)
  feedback SessionFeedback[] @relation("TrainingPlanFeedback")

  @@map("training_plans")
}

// âœ… SessionFeedback (unchanged - preserves existing data)
model SessionFeedback {
  id              String   @id @default(cuid())
  userId          String
  sessionId       String
  week            Int      // Matches DB column
  day             String
  sessionType     String
  sessionSubType  String
  plannedDistance Float?
  plannedPace     String?
  plannedTime     String?
  completed       String
  actualPace      String?
  difficulty      Int
  rpe            Int
  feeling        String
  comments       String?
  submittedAt    DateTime  // Matches DB
  
  // Relationships
  user           User         @relation("UserSessionFeedback", fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation("TrainingPlanFeedback", fields: [trainingPlanId], references: [id], onDelete: Cascade)
  trainingPlanId String
  
  @@map("session_feedback")
}

// ðŸš€ NEW: Session Type enum for generated sessions
enum SessionType {
  RUNNING
  GYM
  REST
  CROSS_TRAINING  // yoga, cycling, swimming, etc.
}

// ðŸš€ ENHANCED: Updated RaceType enum
enum RaceType {
  FIVE_K
  TEN_K
  HALF_MARATHON
  FULL_MARATHON
  CUSTOM
}

// âœ… FitnessLevel (unchanged)
enum FitnessLevel {
  BEGINNER      // New to running
  INTERMEDIATE  // Regular runner, some race experience  
  ADVANCED      // Experienced racer, consistent training
  ELITE         // Competitive runner
}